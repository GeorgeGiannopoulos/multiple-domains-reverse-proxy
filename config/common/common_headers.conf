#
# Headers are something that the server sends to the browser on every response. These headers tell
# the browser to act a certain way, and it is then up to the browser to enforce these headers.
#
# Strict-Transport-Security (HSTS)
#   This header tells the browser that connections should be made over HTTPS. When this header has
#   been added, the browser won’t let you make plain HTTP connection to the server, ensuring that
#   all communication is secure.
#
# X-Frame-Options
#   When specifying this header, you are specifying whether or not other sites can embed your
#   content into their sites. This can help avoid clickjacking attacks.
#
# X-Content-Type-Options
#   Say you have a site where users can upload files. There’s not enough validation on the files,
#   so a user successfully uploads a php file to the server, where the server is expecting an image
#   to be uploaded. The attacker may then be able to access the uploaded file. Now the server
#   responds with an image, however the file’s MIME-type is text/plain. The browser will ‘sniff’
#   the file, and then render the php script, allowing the attacker to do RCE (Remote Code Execution).
#   With this header set to ‘nosniff’, the browser will not look at the file, and simply render
#   it as whatever the server tells the browser that it is.
#
# X-XSS-Protection
#   While this header was more necessary in older browsers, it’s so easy to add that you might as
#   well. Some XSS (Cross-site Scripting) attacks can be very intelligent, while some are very
#   rudimentary. This header will tell browsers to scan for the simple vulnerabilities and block them.
#
# add_header Strict-Transport-Security    "max-age=31536000; includeSubDomains" always;
add_header X-Frame-Options              SAMEORIGIN;
add_header X-Content-Type-Options       nosniff;
add_header X-XSS-Protection             "1; mode=block";
